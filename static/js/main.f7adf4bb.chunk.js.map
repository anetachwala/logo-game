{"version":3,"sources":["GameView.js","Card.js","Welcome.js","App.js","index.js"],"names":["myInterval","Card","this","props","provided","innerRef","draggableProps","dragHandleProps","ref","className","src","img","Component","GameView","componentDidMount","randomCards","cardsRandom","cardsLogo","id","length","randIdx","Math","floor","random","randCard","splice","push","setState","cards","startCountOnClick","state","sec","startCountUp","startGame","setInterval","countUp","startAgain","clearInterval","onDragEnd","result","t","items","destination","source","droppableId","item","index","thisContainerId","newCardContainer","cardContainer","getLastState","console","log","scores","undefined","gameWin","setTimeout","stop","Number","draggableId","Object","keys","userName","map","card","toString","onMouseDown","droppableProps","Welcome","onPressEnter","evt","key","fadeOutWelcome","displayWelcome","updateInputValue","target","value","onChange","onKeyDown","tabIndex","placeholder","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7adf4bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './GameView.css';\r\nimport Card from './Card';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\r\n\r\nvar myInterval;\r\n\r\nclass GameView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =  {\r\n            sec: 0,\r\n            startGame: false,\r\n            cards: [],\r\n            cardContainer: {\r\n                \"6\": {},\r\n                \"7\": {},\r\n                \"8\": {},\r\n                \"9\": {},\r\n                \"10\": {}\r\n            },\r\n            stop: false,\r\n            scores: 0,\r\n            startAgain: false,\r\n            gameWin: \"\"\r\n        }   \r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.randomCards();\r\n    };\r\n\r\n    randomCards = () => {\r\n        let cardsRandom = [];\r\n        let cardsLogo = [ \r\n            {id: 1, img:\"https://anetachwala.github.io/logo-game/z.svg\"},\r\n            {id: 2, img:\"./o.svg\"},\r\n            {id: 3, img:\"o.svg\"},\r\n            {id: 4, img:\"v.svg\"},\r\n            {id: 5, img:\"u.svg\"},\r\n        ];\r\n\r\n        while (cardsLogo.length) {\r\n            let randIdx = Math.floor(Math.random() * cardsLogo.length);\r\n            let randCard = cardsLogo.splice(randIdx, 1)[0];\r\n            cardsRandom.push(randCard);\r\n            this.setState({cards: cardsRandom})\r\n        };  \r\n    };\r\n\r\n    startCountOnClick = () => {\r\n        if (this.state.sec === 0) {\r\n            this.startCountUp();\r\n            this.setState({ startGame: true });\r\n        };\r\n    };\r\n\r\n    startCountUp = () => {\r\n        myInterval = setInterval(this.countUp, 1000);\r\n    };\r\n     \r\n    countUp = () => {\r\n        this.setState({ sec: this.state.sec + 1});\r\n        if(this.state.startAgain){\r\n            clearInterval(myInterval);\r\n        }\r\n    };\r\n\r\n    onDragEnd = (result) => {\r\n\r\n        const t = this.state;\r\n        const items = t.cards;\r\n\r\n        if(!result.destination || result.source.droppableId === result.destination.droppableId) return;\r\n\r\n        const item = items[result.source.index];\r\n        const thisContainerId = result.destination.droppableId;\r\n        const newCardContainer = {...t.cardContainer};\r\n\r\n        const getLastState = () => {\r\n            const t = this.state;\r\n            if (!t.cards.length){\r\n                if (t.cardContainer[\"6\"].id === 1\r\n                    && (t.cardContainer[\"7\"].id === 2 || t.cardContainer[\"7\"].id === 3)\r\n                    && (t.cardContainer[\"8\"].id === 2 || t.cardContainer[\"8\"].id === 3)\r\n                    && t.cardContainer[\"9\"].id === 4\r\n                    && t.cardContainer[\"10\"].id === 5) {\r\n                        this.setState({scores: t.sec, sec: undefined, gameWin: \"You win!\", startAgain: true}, () => {\r\n                            setTimeout(() => {\r\n                                \r\n                                this.setState({\r\n                                    sec: 0,\r\n                                    startGame: false,\r\n                                    cards: [],\r\n                                    cardContainer: {\r\n                                        \"6\": {},\r\n                                        \"7\": {},\r\n                                        \"8\": {},\r\n                                        \"9\": {},\r\n                                        \"10\": {}\r\n                                    },\r\n                                    stop: false,\r\n                                    scores: 0,\r\n                                    startAgain: false,\r\n                                    gameWin: \"\"\r\n                                }, () => this.randomCards())\r\n                            }, 10000);\r\n                        })\r\n                } else {\r\n                    console.log(\"no\", this.state)\r\n                }\r\n            }\r\n        };\r\n\r\n        if (Number(result.draggableId) >= 6 ){    \r\n            if (Object.keys(t.cardContainer[thisContainerId]).length === 0) {\r\n                newCardContainer[thisContainerId] = t.cardContainer[result.draggableId]\r\n                newCardContainer[result.draggableId] = {};\r\n                this.setState({cardContainer: newCardContainer}, () => getLastState()) \r\n            } else if (Object.keys(t.cardContainer[thisContainerId]).length !== 0) {\r\n                newCardContainer[thisContainerId] = t.cardContainer[result.draggableId]\r\n                newCardContainer[result.draggableId] = t.cardContainer[thisContainerId]\r\n                this.setState({cardContainer: newCardContainer}, () => getLastState())\r\n            } \r\n        }\r\n       \r\n        if (Object.keys(t.cardContainer[thisContainerId]).length === 0 && Number(result.draggableId) < 6){\r\n            items.splice(result.source.index, 1);\r\n            const newCardContainer = {...t.cardContainer};\r\n            newCardContainer[thisContainerId] = item;\r\n            this.setState({cardContainer: newCardContainer, cards: items}, () => getLastState())  \r\n        } else {\r\n            return\r\n        };    \r\n    };\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"GameView\">\r\n                <div className=\"GameView--name_and_scores\">\r\n                    <h3>Good Luck, {this.props.userName ? this.props.userName : \"my friend\"}! <br/> <span>Pick up the right cards</span> </h3>\r\n                    <h1>{this.state.gameWin}</h1>\r\n                    <h3><img src={\"clock.svg\"} /> Your score: {this.state.sec ? this.state.sec : this.state.scores} seconds <br/> <span>The faster the better!</span> </h3>\r\n                </div>\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    <div className=\"GameView--cards\">\r\n                        {this.state.cards.map((card, index) => (\r\n                            <Droppable key={card.id} droppableId={card.id.toString()} >\r\n                                {(provided) => (  \r\n                                    <div onMouseDown={!this.state.startGame ? this.startCountOnClick : null} className=\"GameView--Droppable\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        <Draggable draggableId={card.id.toString()} index={index}>\r\n                                            {(provided) => (\r\n                                                <Card img={card.img} innerRef={provided.innerRef} provided={provided} />                                           \r\n                                            )}\r\n                                        </Draggable>\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"GameView--span\">\r\n                        <h3><span>...and drop them here to make the logo great again!</span></h3>\r\n                    </div>\r\n                        <div className=\"GameView--cards_containers\">\r\n                            <Droppable droppableId={\"6\"}>\r\n                                {(provided) => (\r\n                                    <div className=\"GameView--card_container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        {this.state.cardContainer[\"6\"] ? (\r\n                                            <Draggable draggableId={\"6\"} index={0}>\r\n                                                {(provided) => (\r\n                                                    <Card img={this.state.cardContainer[\"6\"].img} innerRef={provided.innerRef} provided={provided} />\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ): null}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                            <Droppable droppableId={\"7\"}>\r\n                                {(provided) => (\r\n                                    <div className=\"GameView--card_container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        {this.state.cardContainer[\"7\"] ? (\r\n                                            <Draggable draggableId={\"7\"} index={1}>\r\n                                            {(provided) => (\r\n                                                <Card img={this.state.cardContainer[\"7\"].img} innerRef={provided.innerRef} provided={provided} />\r\n                                            )}\r\n                                        </Draggable>\r\n                                        ): null}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                            <Droppable droppableId={\"8\"}>\r\n                                {(provided) => (\r\n                                    <div className=\"GameView--card_container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        {this.state.cardContainer[\"8\"] ? (\r\n                                            <Draggable draggableId={\"8\"} index={2}>\r\n                                            {(provided) => (\r\n                                                <Card img={this.state.cardContainer[\"8\"].img} innerRef={provided.innerRef} provided={provided} />\r\n                                            )}\r\n                                        </Draggable>\r\n                                        ): null}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                            <Droppable droppableId={\"9\"}>\r\n                                {(provided) => (\r\n                                    <div className=\"GameView--card_container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        {this.state.cardContainer[\"9\"] ? (\r\n                                            <Draggable draggableId={\"9\"} index={3}>\r\n                                            {(provided) => (\r\n                                                <Card img={this.state.cardContainer[\"9\"].img} innerRef={provided.innerRef} provided={provided} />\r\n                                            )}\r\n                                        </Draggable>\r\n                                        ): null}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                            <Droppable droppableId={\"10\"}>\r\n                                {(provided) => (\r\n                                    <div className=\"GameView--card_container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                        {this.state.cardContainer[\"10\"] ? (\r\n                                            <Draggable draggableId={\"10\"} index={4}>\r\n                                            {(provided) => (\r\n                                                <Card img={this.state.cardContainer[\"10\"].img} innerRef={provided.innerRef} provided={provided} />\r\n                                            )}\r\n                                        </Draggable>\r\n                                        ): null}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                </DragDropContext>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default GameView;","import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\n\r\nclass Card extends Component {\r\n\r\n    render() {\r\n        const { provided, innerRef } = this.props;\r\n        return (\r\n            <div \r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n                ref={innerRef}\r\n            >\r\n                <img className=\"Card--img\" src={this.props.img}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport './Welcome.css';\r\nimport GameView from './GameView';\r\n\r\nclass Welcome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayWelcome: true,\r\n            userName: \"\"\r\n        };\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        console.log(this.props)\r\n    }\r\n\r\n    onPressEnter = (evt) => {\r\n        if (evt.key === \"Enter\") {\r\n            this.fadeOutWelcome();\r\n        };\r\n    };\r\n\r\n    fadeOutWelcome = () => {\r\n        this.setState({ displayWelcome: false })\r\n    };\r\n\r\n    updateInputValue = (evt) => {\r\n        this.setState({\r\n            userName: evt.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.displayWelcome ? (\r\n                    <div className=\"Welcome\">\r\n                        <h2 className=\"Welcome--h2\">Hello friend, tell me your name...</h2>\r\n                        <input value={this.state.userName} onChange={this.updateInputValue} onKeyDown={this.onPressEnter} className=\"Welcome--input\" tabIndex=\"-1\" placeholder=\"Your name here\" />\r\n                        <button className=\"Welcome--button\" onClick={this.fadeOutWelcome}>Let's go<img className=\"arrow\" src={\"arrow.svg\"} /></button>\r\n                    </div>\r\n                ): <GameView userName={this.state.userName} /> } \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Welcome;","import React, { Component } from 'react';\nimport './App.css';\nimport Welcome from './Welcome';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Welcome />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}